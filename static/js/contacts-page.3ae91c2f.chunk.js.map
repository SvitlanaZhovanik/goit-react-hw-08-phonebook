{"version":3,"file":"static/js/contacts-page.3ae91c2f.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Filter.js","components/ContactsList/ContactItem.js","components/ContactsList/ContactsList.js","components/Form/FormContact.js","pages/ContactsPage.js"],"sourcesContent":["export const getFilter = state => state.filter;\n","import { Form, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from '../redux/contacts/selectors';\nimport { filterContact } from '../redux/contacts/contactsSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const handleFilter = e => dispatch(filterContact(e.currentTarget.value));\n  return (\n    <Form>\n      <Form.Group className=\"mb-3\">\n        <Form.Label column sm={2}>\n          Find contacts by name:\n        </Form.Label>\n        <Col xs={12} lg={4}>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Please enter the required name\"\n            value={filter}\n            onChange={handleFilter}\n          />\n        </Col>\n      </Form.Group>\n    </Form>\n  );\n};\nexport default Filter;\n","import PropTypes from 'prop-types';\nimport { FcCellPhone, FcEmptyTrash } from 'react-icons/fc';\nimport { ListGroup, Button, Spinner, Stack } from 'react-bootstrap';\n\nconst ContactItem = ({ id, name, number, onClick, deleting }) => {\n  return (\n    <ListGroup.Item as=\"li\" variant=\"secondary\">\n      <Stack direction=\"horizontal\" gap={3}>\n        <FcCellPhone size=\"22px\" /> <span className=\"ms-2\">{name}:</span>{' '}\n        {number}\n        {deleting ? (\n          <Button\n            className=\"ms-auto\"\n            id={id}\n            onClick={onClick}\n            variant=\"outline-danger\"\n          >\n            <Spinner\n              animation=\"border\"\n              variant=\"danger\"\n              size=\"sm\"\n              aria-hidden=\"true\"\n            />\n            <span className=\"visually-hidden\">Loading...</span>\n          </Button>\n        ) : (\n          <Button\n            className=\"ms-auto\"\n            id={id}\n            onClick={onClick}\n            variant=\"outline-danger\"\n          >\n            <FcEmptyTrash size={20} />\n          </Button>\n        )}\n      </Stack>\n    </ListGroup.Item>\n  );\n};\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\nexport default ContactItem;\n","import ContactItem from './ContactItem';\nimport { useSelector } from 'react-redux';\nimport { getFilter } from '../../redux/contacts/selectors';\nimport ClockLoader from 'react-spinners/ClockLoader';\nimport { useDeleteContactMutation } from '../../redux/contacts/contactsSlice';\nimport { ListGroup, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport PropTypes from 'prop-types';\n\nconst ContactsList = ({ contacts, error, isFetching, isError }) => {\n  const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation();\n  const filter = useSelector(getFilter);\n  const getVisibleContacts = () => {\n    const normalizeFilter = filter.toLowerCase();\n    return contacts?.filter(contact =>\n      contact.name.toLowerCase().includes(normalizeFilter)\n    );\n  };\n  const contactsNormalize = getVisibleContacts();\n  const handleDeleteContact = event => {\n    deleteContact(event.currentTarget.id);\n  };\n  return (\n    <Col xs={12} lg={4}>\n      {isFetching && <ClockLoader color=\"#0d6efd\" />}\n      {isError &&\n        toast.error(`${error.data} Sorry, something went wrong. Try later`)}\n      {contacts && !isFetching && !isError && (\n        <ListGroup as=\"ul\">\n          {contactsNormalize.map(({ id, name, number }) => {\n            return (\n              <ContactItem\n                onClick={handleDeleteContact}\n                deleting={isDeleting}\n                key={id}\n                id={id}\n                name={name}\n                number={number}\n              />\n            );\n          })}\n        </ListGroup>\n      )}\n    </Col>\n  );\n};\n\nexport default ContactsList;\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object),\n  error: PropTypes.object,\n  isFetching: PropTypes.bool,\n  isError: PropTypes.bool,\n};\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Row, Button, Col } from 'react-bootstrap';\nimport { FcBusinessContact, FcCallback } from 'react-icons/fc';\nimport { toast } from 'react-toastify';\nimport SyncLoader from 'react-spinners/SyncLoader';\nimport { FcDataRecovery } from 'react-icons/fc';\nimport { useAddContactMutation } from '../../redux/contacts/contactsSlice';\n\nexport default function FormContact({ contacts }) {\n  const [createContact, { isLoading }] = useAddContactMutation();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const addContact = (name, number) => {\n    const contact = {\n      name: name,\n      number: number,\n    };\n    const normalizeName = contact.name.toLowerCase();\n    if (contacts.some(item => item.name.toLowerCase() === normalizeName)) {\n      return toast.info(`${contact.name} is already in your contacts`, {\n        icon: <FcDataRecovery size=\"30px\" />,\n      });\n    }\n    createContact(contact);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    addContact(name, number);\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Row className=\"mb-3\">\n        <Form.Group as={Col} controlId=\"formGridEmail\">\n          <Form.Label>\n            <FcBusinessContact\n              style={{ verticalAlign: 'middle' }}\n              size=\"27px\"\n            />\n            Name\n          </Form.Label>\n          <Form.Control\n            type=\"text\"\n            value={name}\n            onChange={evt => setName(evt.target.value)}\n            name=\"name\"\n            placeholder=\"Enter name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </Form.Group>\n        <Form.Group as={Col} controlId=\"formGridPassword\">\n          <Form.Label>\n            <FcCallback style={{ verticalAlign: 'middle' }} size=\"27px\" /> Phone\n          </Form.Label>\n          <Form.Control\n            type=\"tel\"\n            placeholder=\"Enter number\"\n            name=\"number\"\n            value={number}\n            onChange={evt => setNumber(evt.target.value)}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </Form.Group>\n      </Row>\n      <Button type=\"submit\">\n        {isLoading ? <SyncLoader color=\"#ffffff\" size={8} /> : 'Add contacts'}\n      </Button>\n    </Form>\n  );\n}\nFormContact.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object),\n};\n","import { useFetchContactsQuery } from 'redux/contacts/contactsSlice';\nimport Filter from 'components/Filter';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport FormContact from 'components/Form/FormContact';\nimport { ToastContainer } from 'react-toastify';\nimport { Container } from 'react-bootstrap';\n\nexport default function ContactsPage() {\n  const { data, error, isFetching, isError } = useFetchContactsQuery();\n  return (\n    <Container>\n      <div>\n        <h1>Phonebook</h1>\n        <FormContact contacts={data} />\n      </div>\n      <Container className=\"mt-4\">\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactsList\n          contacts={data}\n          error={error}\n          isFetching={isFetching}\n          isError={isError}\n        />\n      </Container>\n      <ToastContainer position=\"top-center\" />\n    </Container>\n  );\n}\n"],"names":["getFilter","state","filter","dispatch","useDispatch","useSelector","Form","className","column","sm","Col","xs","lg","type","placeholder","value","onChange","e","filterContact","currentTarget","id","name","number","onClick","deleting","ListGroup","as","variant","Stack","direction","gap","size","Button","Spinner","animation","contacts","error","isFetching","isError","useDeleteContactMutation","deleteContact","isDeleting","isLoading","contactsNormalize","normalizeFilter","toLowerCase","contact","includes","getVisibleContacts","handleDeleteContact","event","color","toast","data","map","FormContact","useAddContactMutation","createContact","useState","setName","setNumber","onSubmit","preventDefault","normalizeName","some","item","icon","addContact","Row","controlId","style","verticalAlign","evt","target","pattern","title","required","ContactsPage","useFetchContactsQuery","Container","position"],"sourceRoot":""}